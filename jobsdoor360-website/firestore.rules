rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
   
    // Helper function to check authentication
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if the user is the master admin
    function isMasterAdmin() {
      return get(/databases/$(database)/documents/login_roles/$(request.auth.token.email)).data.role == "master_admin";
    }

    // Helper function to check if the user owns the document
    function isResourceOwner(email) {
      return request.auth.token.email == email;
    }

    // Helper function to check if the user is recruiter
    function isRecruiter(){
      return get(/databases/$(database)/documents/login_roles/$(request.auth.token.email)).data.role == "recruiter";
    }


    match /user_profile/{email} {
      allow get: if isAuthenticated() && isResourceOwner(email);
      allow list: if isAuthenticated() && isRecruiter();
      allow write: if isAuthenticated() && isResourceOwner(email);
    }
   
    match /login_roles/{email} {
     allow get: if isAuthenticated() && isResourceOwner(email);
    }

match /jobs_company_wise/{company_code} {
      allow read: if true;
      allow write: if get(/databases/$(database)/documents/login_roles/$(request.auth.token.email)).data.company_code == company_code;
    }

    match /user_consultancies/{email} {
      allow get: if isAuthenticated() && isRecruiter();
      allow list: if isAuthenticated() && isRecruiter();
    }

    match /user_interviews/{email} {
      allow get: if isAuthenticated() && isRecruiter();
      allow list: if isAuthenticated() && isRecruiter();
      allow write: if isAuthenticated() && isRecruiter();
    }

    match /lead/{email} {
      allow get: if true;
      allow create,update: if true;
    }

    match /assessment/{email} {
      allow read: if true;
      allow write: if false; // Prevent writes in production
    }

    // User assessment results
    match /user_assessment_results/{email} {
      allow get: if isAuthenticated() && (isResourceOwner(email) || isRecruiter());
      allow list: if isAuthenticated() && isRecruiter();
      allow write: if isAuthenticated() && isResourceOwner(email);
    }

    // Global fallback â€” allow full access only to master admin
    match /{document=**} {
      allow read, write: if isMasterAdmin();
    }
  }
}